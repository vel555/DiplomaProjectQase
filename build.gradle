plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

allure {
    report {
        version.set("2.12.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.12.0")
            }
        }
    }
}

dependencies {
    testImplementation (
            "org.junit.jupiter:junit-jupiter:5.11.3",
            "com.codeborne:selenide:6.19.1",
            "org.slf4j:slf4j-simple:2.0.16",
            "org.assertj:assertj-core:3.26.3",
            "io.qameta.allure:allure-selenide:2.12.0",
            "io.rest-assured:rest-assured:5.5.0",
            "org.assertj:assertj-core:3.27.2"

    )
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

}

test {
    useJUnitPlatform()
}
test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").toString().isEmpty()) includeTags System.getProperty("tag").toString()
    }
    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelis' : System.getProperty("threads").toInteger()
        ]
    }
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}